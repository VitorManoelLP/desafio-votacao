services:
  postgres:
    image: postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ${POSTGRES_VOLUME}:/var/lib/postgresql/data
      - ./init-schema-keycloak.sql:/docker-entrypoint-initdb.d/init-schema-keycloak.sql
    ports:
      - 5432:5432
    networks:
      - voting_custom_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak: 
    image: quay.io/keycloak/keycloak:20.0.0
    command: ["-Dkeycloak.import=/config/realm-config.json", "start-dev"]
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: postgres
      KC_DB_PASSWORD: postgres
      KC_DB_USERNAME: postgres
      KC_DB_SCHEMA: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - 8080:8080
    volumes:
      - ./keycloak-init.json:/config/realm-config.json
      - ./keycloak-theme/theme/voting:/opt/keycloak/themes/voting
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - voting_custom_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: VOTING
    ports:
      - 3000:3000
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - voting_custom_network

networks:
  voting_custom_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

